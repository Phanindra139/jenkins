f1. docker pull for docker hub images 

                 docker pull  image_name:tag
                 example - docker pull redis:4.0
                         - docker pull redis:latest

2. docker pull for any private repo  or orignal syntax d dockerpull

                docker pull registrydomain/image_name:tag

              example: docker pull docker.io/library/redis:4.0

3. docker start imagename:tag - helps to start the cotainer that is pulled by us Here tag is version of image you start or pull

4. docker run image_name:tag - we perform 2operations here  we pull and start automatically no neeed to pull and start again 

3. docker images       : to list all the images in our system

4. docker ps- to list all the images running i.e containers in our system

5. docker stop container_id(or)container_name : Helps to stop the running container 

6. docker rm container_id(or)container_name : Helps to remove the container

7.docker rmi imageid(or)image_name - Helps to remove the image 

8.docker ps -a - TO list all containers which are in running or in stopped state 

9. docker run -d image_name:tag - Helps to run the docker in detach mode : means we cannot see the output in terminal \

10. docker run -p 27017:27017 mongo - Help to specify the host port and container port , we can change host port i.e our system port 27017 is the listening port of our host and container

11. docker run --name mongodb mongo - Helps to change the name name of the container 

12. docker logs container_name (or) id   - helps to view the logs of the container 

13.  docker exec -it containerid (or) name /bin/bash   -  help to login to container and perform unix operations for more info of contianer
 
14.  docker exec -it containerid (or) name /bin/sh   - some containers doesnot operates bash scripts


15. docker -e  ME_CONFIG_MONGODB_ADMINUSERNAME=admin (or) your usesrname     : used to define environment variables for d.b or other images 

16. docker -e ME_CONFIG_MONGODB_ADMINPASSWORD=password (or) your password     : used to define environment variables for your d.b or other images 

17. we have diferent environement variables changes based on the images you use  
 
18.  docker network create noetwork_name   = used to define the docker network when you dont use docker compose , we use these commands , what is a docker network refer in notes 

19. docker network ls    = tolist all the networks created 

18.  Example : creating a docker network between mongo and mongo-express so they can communicate each other 

     create a network
    
     -> docker network create mongo-network   

     Define network for mongodb
        
    ->  docke run  -d -p 27017:27017 --name mongodb -e ME_CONFIG_MONGODB_ADMINUSERNAME=admin -e ME_CONFIG_MONGODB_ADMINPASSWORD=password --net monog-network mongo 

     Define network for mongo-express 
 
    ->  docke run  -d -p 8081:8081 --name mongo-express -e ME_CONFIG_MONGODB_ADMINUSERNAME=admin -e ME_CONFIG_MONGODB_ADMINPASSWORD=password -e ME_CONFIG_MONGODB_SERVER=mongodb ^
     
       --net monog-network mongo-express
    
     a mongo-network is created with mognodb and mongo-express


19. or we can write all this in docker compose file - docker compose file is yaml script : using docker compose file network is automaticlly created we dont need to specify and create it 

              version: '3'
              services:
                mongodb: 
                 image: mongo                                      # docker network ls : to see wheter netowrk created r not after runnig yaml script
                 ports: 
                   - 27017:27017                                     # This is just an example we have different docker-compose files for different projects
                 environment:
                   - MONGO_INITDB_ROOT_USERNAME=admin
                   - MONGO_INITDB_ROOT_PASSWORD=password
                 mongo-express: 
                  image: mongo-express
                  ports:
                   - 8081:8081
                  environment:
                   - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
                   - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
                   - ME_CONFIG_MONGODB_ADMINPASSWORD=password
                   - ME_CONFIG_MONGODB_SERVER=mongodb
    
   20.   docker-compose  -f mongo.yaml up   = used for runnig script     ## here mongo.yaml is your docker compose file name, -f specifying the file, up for runing 
   
   21.  docker-compose  -f mongo.yaml up -d    = used to run script in detach mode    

   22. docker-compose  -f mongo.yaml down    = used to turn off all the containers that created by the srcipt ##monog.yaml 

   23.  docke file : it is the blue print of the docker image we try to build now using docker command , docker file should be save as docker file only

             FROM node:13-alpine                                        ###for docker image to build using coommand  we need docker file, docker file is blue print for docker image 
             ENV MONGO_DB_USERNAME=admin MONGO_DB_PWD=password          ##CMD is entry point actually refer notes for more desscription about docker file 
             RUN mkdir -p /home/app
             COPY . /home/app
             CMD ["node","/home/app/server.js"]

   24.  docker build -t your_app_name:tag ##using docker file only we can run this command  

          example: docker build -t my-app:1.0 

                   docker images    = to check wheter our image is build or not 

  25. to push in to private repo we have another  commands that can refered by private repo : example AWS ECR 
    
        Authenticate your AWs CLI to the private repo 
   
        docker tag my-app:latets/#########your imageid in private repo/my-app:latets
 
         docker psuh #########your imageid in private repo









some other commands



A self-sufficient runtime for containers

Options:
      --config string      Location of client config files (default
                           "C:\\Users\\pc\\.docker")
  -c, --context string     Name of the context to use to connect to the
                           daemon (overrides DOCKER_HOST env var and
                           default context set with "docker context use")
  -D, --debug              Enable debug mode
  -H, --host list          Daemon socket(s) to connect to
  -l, --log-level string   Set the logging level
                           ("debug"|"info"|"warn"|"error"|"fatal")
                           (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default
                           "C:\\Users\\pc\\.docker\\ca.pem")
      --tlscert string     Path to TLS certificate file (default
                           "C:\\Users\\pc\\.docker\\cert.pem")
      --tlskey string      Path to TLS key file (default
                           "C:\\Users\\pc\\.docker\\key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit

Management Commands:
  builder     Manage builds
  buildx*     Docker Buildx (Docker Inc., v0.8.0)
  compose*    Docker Compose (Docker Inc., v2.3.3)
  config      Manage Docker configs
  container   Manage containers
  context     Manage contexts
  image       Manage images
  manifest    Manage Docker image manifests and manifest lists
  network     Manage networks
  node        Manage Swarm nodes
  plugin      Manage plugins
  scan*       Docker Scan (Docker Inc., v0.17.0)
  secret      Manage Docker secrets
  service     Manage services
  stack       Manage Docker stacks
  swarm       Manage Swarm
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes

Commands:
  attach      Attach local standard input, output, and error streams to a running container
  build       Build an image from a Dockerfile
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  images      List images
  import      Import the contents from a tarball to create a filesystem image
  info        Display system-wide information
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  login       Log in to a Docker registry
  logout      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  run         Run a command in a new container
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  search      Search the Docker Hub for images
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  version     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes

Run 'docker COMMAND --help' for more information on a command.

     
       

 